1、DataSource对象可由容器(Tomcat)提供，不能使用创建实例的方法来生成
	DataSource对象，要使用JNDI

2、JNDI(Java命名和目录接口)
	*标准API接口，Java程序通过这些API可以访问命名目录服务
	*命名目录服务将名称和对象联系起来，使得可以用名称访问对象
	*JNDI在系统运行时会在内存中构建一个层次节否。通过程序访问到这个JNDI
		管理器的InitialContext对象就拥有了这个JNDI的上下文，就可以查找要用的对象
	**命名服务
		计算机系统中的一个基本贡呢。将名字和计算机中的一个对象相关联，通过名字可以方便的找到对象
	**目录服务
		命名服务的延伸，目录服务不仅保存对象和对象名的匹配，而且白村这个对象的各种属性，
		可以对这些属性进行增删改查
		
3、JNDI接口概述
	*javax.naming包中提供了Context接口
		Bind(String name,Object object)：将对象和一个名字绑定
		Lookup(String name)：返回与指定名字绑定的对象

4、配置JNDI
	*在Tomcat的conf的context.xml中配置，对整个web容器有效
		<Context>
			<Resource name="jdbc/TestDB" 	<!-- JNDI名称 -->
					  auth="Container" 		<!-- 容器管理 -->
					  type="javax.sql.DataSource"
		              maxActive="100" 
		              maxIdle="30" 
		              maxWait="10000"
		              username="javauser" 
		              password="javadude" 
		              driverClassName="com.mysql.jdbc.Driver"
		              url="jdbc:mysql://localhost:3306/javatest"/>

		</Context>
	*在web应用中配置，只对该应用有效
		创建虚拟目录xxx.xml，在xxx.xml中添加
		<Context docBase="web应用路径" reloadable="true">
			<Resource name="jdbc/TestDB" 	<!-- JNDI名称 -->
					  auth="Container" 		<!-- 容器管理 -->
					  type="javax.sql.DataSource"
		              maxActive="100" 
		              maxIdle="30" 
		              maxWait="10000"
		              username="javauser" 
		              password="javadude" 
		              driverClassName="com.mysql.jdbc.Driver"
		              url="jdbc:mysql://localhost:3306/javatest"/>

		</Context>
		
5、在Java中使用JDNI配置数据源
	/**
	*	java:comp/env是固定写法
	*/
	Context initCtx = new InitialContext();
	Context envCtx = (Context) initCtx.lookup("java:comp/env");
	
	// 查找数据源
	DataSource ds = (DataSource)
	  envCtx.lookup("jdbc/EmployeeDB");
	Connection conn = ds.getConnection();
	... use this connection to access the database ...
	conn.close();